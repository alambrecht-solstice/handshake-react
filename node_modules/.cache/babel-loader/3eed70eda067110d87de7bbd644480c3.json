{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = false;\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createElement();\n    this.runDetection = this.runDetection.bind(this);\n    this.model = React.createRef();\n    this.canvas = React.createRef();\n    this.context = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef();\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  toggleVideo() {\n    console.log(this.isVideo.value);\n\n    if (!this.isVideo) {\n      //this.updateNote.innerText = \"Starting video\"\n      this.startVideo();\n    } else {\n      //this.updateNote.innerText = \"Stopping video\"\n      handTrack.stopVideo(this.video);\n      this.isVideo = false; //this.updateNote.innerText = \"Video stopped\"\n    }\n  }\n\n  startVideo() {\n    console.log(this.video);\n    handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n\n      if (status) {\n        //this.updateNote.innerText = \"Video started. Now tracking\"\n        this.isVideo = true;\n        this.runDetection();\n      } else {//this.updateNote.innerText = \"Please enable video\"\n      }\n    });\n  }\n\n  runDetection() {\n    this.model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      this.model.renderPredictions(predictions, this.canvas, this.context, this.video);\n\n      if (this.isVideo) {\n        requestAnimationFrame(this.runDetection);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.video = this.refs.video;\n    this.canvas = this.refs.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.trackButton = this.refs.trackbutton;\n    this.updateNote = this.refs.updatenote;\n    this.isVideo.value = false;\n    this.model = null;\n    const modelParams = {\n      flipHorizontal: true,\n      // flip e.g for video  \n      maxNumBoxes: 20,\n      // maximum number of boxes to detect\n      iouThreshold: 0.5,\n      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6 // confidence threshold for predictions.\n      // Load the model.\n\n    };\n    handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      this.model = lmodel; //updateNote.innerText = \"Loaded Model!\"\n      //this.trackButton.disabled = false\n    });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.toggleVideo(),\n      id: \"trackbutton\",\n      class: \"bx--btn bx--btn--secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Toggle Video\"), React.createElement(\"div\", {\n      id: \"updatenote\",\n      class: \"updatenote mt10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \" loading model ..\"), React.createElement(\"video\", {\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.textInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Focus the text input\",\n      onClick: this.focusTextInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","textInput","createRef","focusTextInput","bind","toggleVideo","isVideo","updateNote","startVideo","video","createElement","runDetection","model","canvas","context","trackButton","current","focus","console","log","value","stopVideo","then","status","detect","predictions","renderPredictions","requestAnimationFrame","componentDidMount","refs","getContext","trackbutton","updatenote","modelParams","flipHorizontal","maxNumBoxes","iouThreshold","scoreThreshold","load","lmodel","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,6BAA3B;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AACA,SAAKC,SAAL,GAAiBN,KAAK,CAACO,SAAN,EAAjB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,OAAL,GAAe,KAAf;AACA,SAAKC,UAAL,GAAkBZ,KAAK,CAACO,SAAN,EAAlB;AACA,SAAKM,UAAL,GAAkB,KAAKA,UAAL,CAAgBJ,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKK,KAAL,GAAad,KAAK,CAACe,aAAN,EAAb;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBP,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKQ,KAAL,GAAajB,KAAK,CAACO,SAAN,EAAb;AACA,SAAKW,MAAL,GAAclB,KAAK,CAACO,SAAN,EAAd;AACA,SAAKY,OAAL,GAAenB,KAAK,CAACO,SAAN,EAAf;AACA,SAAKa,WAAL,GAAmBpB,KAAK,CAACO,SAAN,EAAnB;AACA,SAAKK,UAAL,GAAkBZ,KAAK,CAACO,SAAN,EAAlB;AAID;;AAEDC,EAAAA,cAAc,GAAG;AACf;AACA;AACA,SAAKF,SAAL,CAAee,OAAf,CAAuBC,KAAvB;AACD;;AAEDZ,EAAAA,WAAW,GAAG;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,OAAL,CAAac,KAAzB;;AACA,QAAI,CAAC,KAAKd,OAAV,EAAmB;AACf;AACA,WAAKE,UAAL;AACH,KAHD,MAGO;AACH;AACAZ,MAAAA,SAAS,CAACyB,SAAV,CAAoB,KAAKZ,KAAzB;AACA,WAAKH,OAAL,GAAe,KAAf,CAHG,CAIH;AACH;AACJ;;AAEDE,EAAAA,UAAU,GAAG;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAjB;AACAb,IAAAA,SAAS,CAACY,UAAV,CAAqB,KAAKC,KAA1B,EAAiCa,IAAjC,CAAsC,UAAUC,MAAV,EAAkB;AACpDL,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BI,MAA7B;;AACA,UAAIA,MAAJ,EAAY;AACR;AACA,aAAKjB,OAAL,GAAe,IAAf;AACA,aAAKK,YAAL;AACH,OAJD,MAIO,CACH;AACH;AACJ,KATD;AAUD;;AAEDA,EAAAA,YAAY,GAAG;AACb,SAAKC,KAAL,CAAWY,MAAX,CAAkB,KAAKf,KAAvB,EAA8Ba,IAA9B,CAAmCG,WAAW,IAAI;AAC9CP,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BM,WAA7B;AACA,WAAKb,KAAL,CAAWc,iBAAX,CAA6BD,WAA7B,EAA0C,KAAKZ,MAA/C,EAAuD,KAAKC,OAA5D,EAAqE,KAAKL,KAA1E;;AACA,UAAI,KAAKH,OAAT,EAAkB;AACdqB,QAAAA,qBAAqB,CAAC,KAAKhB,YAAN,CAArB;AACH;AACJ,KAND;AAOD;;AACCiB,EAAAA,iBAAiB,GAAG;AAClB,SAAKnB,KAAL,GAAa,KAAKoB,IAAL,CAAUpB,KAAvB;AACA,SAAKI,MAAL,GAAc,KAAKgB,IAAL,CAAUhB,MAAxB;AACA,SAAKC,OAAL,GAAe,KAAKD,MAAL,CAAYiB,UAAZ,CAAuB,IAAvB,CAAf;AACA,SAAKf,WAAL,GAAmB,KAAKc,IAAL,CAAUE,WAA7B;AACA,SAAKxB,UAAL,GAAkB,KAAKsB,IAAL,CAAUG,UAA5B;AAEA,SAAK1B,OAAL,CAAac,KAAb,GAAqB,KAArB;AACA,SAAKR,KAAL,GAAa,IAAb;AAEA,UAAMqB,WAAW,GAAG;AAClBC,MAAAA,cAAc,EAAE,IADE;AACM;AACxBC,MAAAA,WAAW,EAAE,EAFK;AAEM;AACxBC,MAAAA,YAAY,EAAE,GAHI;AAGM;AACxBC,MAAAA,cAAc,EAAE,GAJE,CAIM;AAK5B;;AATsB,KAApB;AAUFzC,IAAAA,SAAS,CAAC0C,IAAV,CAAeL,WAAf,EAA4BX,IAA5B,CAAiCiB,MAAM,IAAI;AACvC;AACA,WAAK3B,KAAL,GAAa2B,MAAb,CAFuC,CAGvC;AACA;AACH,KALD;AAOC;;AAIDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAQ,MAAA,OAAO,EAAE,KAAKnC,WAAL,EAAjB;AAAqC,MAAA,EAAE,EAAC,aAAxC;AAAsD,MAAA,KAAK,EAAC,4BAA5D;AAAyF,MAAA,IAAI,EAAC,QAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADN,EAIE;AAAK,MAAA,EAAE,EAAC,YAAR;AAAqB,MAAA,KAAK,EAAC,iBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJF,EAKE;AAAO,MAAA,KAAK,EAAC,oBAAb;AAAkC,MAAA,QAAQ,EAAC,UAA3C;AAAsD,MAAA,EAAE,EAAC,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAE,GAA5B;AAAiC,MAAA,MAAM,EAAE,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,GAAG,EAAE,KAAKJ,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAWE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,sBAFR;AAGE,MAAA,OAAO,EAAE,KAAKE,cAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAmBD;;AArH0C;;AAwH7C,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = false;\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createElement();\n    this.runDetection = this.runDetection.bind(this);\n    this.model = React.createRef();\n    this.canvas = React.createRef();\n    this.context = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef();\n\n\n\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  toggleVideo() {\n    console.log(this.isVideo.value);\n    if (!this.isVideo) {\n        //this.updateNote.innerText = \"Starting video\"\n        this.startVideo();\n    } else {\n        //this.updateNote.innerText = \"Stopping video\"\n        handTrack.stopVideo(this.video)\n        this.isVideo = false;\n        //this.updateNote.innerText = \"Video stopped\"\n    }\n}\n\nstartVideo() {\n  console.log(this.video);\n  handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n      if (status) {\n          //this.updateNote.innerText = \"Video started. Now tracking\"\n          this.isVideo = true\n          this.runDetection()\n      } else {\n          //this.updateNote.innerText = \"Please enable video\"\n      }\n  });\n}\n\nrunDetection() {\n  this.model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      this.model.renderPredictions(predictions, this.canvas, this.context, this.video);\n      if (this.isVideo) {\n          requestAnimationFrame(this.runDetection);\n      }\n  });\n}\n  componentDidMount() {\n    this.video = this.refs.video;\n    this.canvas = this.refs.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.trackButton = this.refs.trackbutton;\n    this.updateNote = this.refs.updatenote;\n\n    this.isVideo.value = false;\n    this.model = null;\n\n    const modelParams = {\n      flipHorizontal: true,   // flip e.g for video  \n      maxNumBoxes: 20,        // maximum number of boxes to detect\n      iouThreshold: 0.5,      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6,    // confidence threshold for predictions.\n    }\n  \n\n  \n  // Load the model.\n  handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      this.model = lmodel\n      //updateNote.innerText = \"Loaded Model!\"\n      //this.trackButton.disabled = false\n  });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n            <button onClick={this.toggleVideo()} id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n            Toggle Video\n          </button>\n        <div id=\"updatenote\" class=\"updatenote mt10\"> loading model ..</div>\n        <video class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref=\"canvas\" width={640} height={425} />\n        <input\n          type=\"text\"\n          ref={this.textInput} />\n\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}