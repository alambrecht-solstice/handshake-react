{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n    // this.textInput = React.createRef();\n    // this.focusTextInput = this.focusTextInput.bind(this);\n\n    this.state = {\n      isVideo: false\n    }; //this.toggleVideo = this.toggleVideo.bind(this);\n\n    this.video = React.createRef(); // this.isVideo = false;\n    // this.updateNote = React.createRef();\n    // this.startVideo = this.startVideo.bind(this);\n    // this.video = React.createRef();\n    // this.runDetection = this.runDetection.bind(this);\n    // this.model = React.createRef();\n    // this.canvas = React.createRef();\n    // this.context = React.createRef();\n    // this.trackButton = React.createRef();\n    // this.updateNote = React.createRef();\n  } // focusTextInput() {\n  //   // Explicitly focus the text input using the raw DOM API\n  //   // Note: we're accessing \"current\" to get the DOM node\n  //   this.textInput.current.focus();\n  // }\n\n\n  componentDidMount() {\n    console.log(this.video); // this.canvas = this.refs.canvas;\n    // this.context = this.canvas.getContext(\"2d\");\n    // this.trackButton = this.refs.trackbutton;\n    // this.updateNote = this.refs.updatenote;\n    // this.setState({isVideo: false});\n    // this.model = null;\n    // const modelParams = {\n    //   flipHorizontal: true,   // flip e.g for video  \n    //   maxNumBoxes: 20,        // maximum number of boxes to detect\n    //   iouThreshold: 0.5,      // ioU threshold for non-max suppression\n    //   scoreThreshold: 0.6,    // confidence threshold for predictions.\n    // }\n    // // Load the model.\n    // handTrack.load(modelParams).then(lmodel => {\n    //     // detect objects in the image.\n    //     this.model = lmodel\n    //     updateNote.innerText = \"Loaded Model!\"\n    //     this.trackButton.disabled = false\n    // });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.video,\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","state","isVideo","video","createRef","componentDidMount","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,6BAA3B;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;AACA;AACA;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAG;AADC,KAAb,CALiB,CAQjB;;AACA,SAAKC,KAAL,GAAaR,KAAK,CAACS,SAAN,EAAb,CATiB,CAUjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAID,GAxB0C,CA0B3C;AACA;AACA;AACA;AACA;;;AAGAC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB,EADkB,CAGlB;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKF;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;;AAIDK,EAAAA,MAAM,GAAG;AACP;AACA;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAO,MAAA,GAAG,EAAE,KAAKL,KAAjB;AAAwB,MAAA,KAAK,EAAC,oBAA9B;AAAmD,MAAA,QAAQ,EAAC,UAA5D;AAAuE,MAAA,EAAE,EAAC,SAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAE,GAA5B;AAAiC,MAAA,MAAM,EAAE,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAqBD;;AA1F0C;;AA6F7C,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    // this.textInput = React.createRef();\n    // this.focusTextInput = this.focusTextInput.bind(this);\n    this.state = {\n      isVideo : false\n    };\n    //this.toggleVideo = this.toggleVideo.bind(this);\n    this.video = React.createRef();\n    // this.isVideo = false;\n    // this.updateNote = React.createRef();\n    // this.startVideo = this.startVideo.bind(this);\n    // this.video = React.createRef();\n    // this.runDetection = this.runDetection.bind(this);\n    // this.model = React.createRef();\n    // this.canvas = React.createRef();\n    // this.context = React.createRef();\n    // this.trackButton = React.createRef();\n    // this.updateNote = React.createRef();\n\n\n\n  }\n\n  // focusTextInput() {\n  //   // Explicitly focus the text input using the raw DOM API\n  //   // Note: we're accessing \"current\" to get the DOM node\n  //   this.textInput.current.focus();\n  // }\n\n\n  componentDidMount() {\n    console.log(this.video);\n    \n    // this.canvas = this.refs.canvas;\n    // this.context = this.canvas.getContext(\"2d\");\n    // this.trackButton = this.refs.trackbutton;\n    // this.updateNote = this.refs.updatenote;\n\n    // this.setState({isVideo: false});\n    // this.model = null;\n\n    // const modelParams = {\n    //   flipHorizontal: true,   // flip e.g for video  \n    //   maxNumBoxes: 20,        // maximum number of boxes to detect\n    //   iouThreshold: 0.5,      // ioU threshold for non-max suppression\n    //   scoreThreshold: 0.6,    // confidence threshold for predictions.\n    // }\n  \n\n    \n  \n  // // Load the model.\n  // handTrack.load(modelParams).then(lmodel => {\n  //     // detect objects in the image.\n  //     this.model = lmodel\n  //     updateNote.innerText = \"Loaded Model!\"\n  //     this.trackButton.disabled = false\n  // });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n          {/*}\n            <button onClick={this.toggleVideo()} id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n            Toggle Video\n          </button>\n        <div id=\"updatenote\" class=\"updatenote mt10\"> loading model ..</div>\n    */}\n        <video ref={this.video} class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref=\"canvas\" width={640} height={425} />\n        {/* <input\n          type=\"text\"\n          ref={this.textInput} />\n\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}