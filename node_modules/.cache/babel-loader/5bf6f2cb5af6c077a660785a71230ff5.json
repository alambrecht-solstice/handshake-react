{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport handTrack from './Handshake';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  componentDidMount() {\n    const video = this.refs.video;\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n    let trackButton = this.refs.trackbutton;\n    let updateNote = this.refs.updatenote;\n    let isVideo = false;\n    let model = null;\n    const modelParams = {\n      flipHorizontal: true,\n      // flip e.g for video  \n      maxNumBoxes: 20,\n      // maximum number of boxes to detect\n      iouThreshold: 0.5,\n      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6 // confidence threshold for predictions.\n\n    };\n\n    function startVideo() {\n      handTrack.startVideo(video).then(function (status) {\n        console.log(\"video started\", status);\n\n        if (status) {\n          updateNote.innerText = \"Video started. Now tracking\";\n          isVideo = true;\n          runDetection();\n        } else {\n          updateNote.innerText = \"Please enable video\";\n        }\n      });\n    }\n\n    function runDetection() {\n      model.detect(video).then(predictions => {\n        console.log(\"Predictions: \", predictions);\n        model.renderPredictions(predictions, canvas, context, video);\n\n        if (isVideo) {\n          requestAnimationFrame(runDetection);\n        }\n      });\n    } // Load the model.\n\n\n    handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      model = lmodel;\n      updateNote.innerText = \"Loaded Model!\";\n      trackButton.disabled = false;\n    });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: toggleVideo(),\n      id: \"trackbutton\",\n      class: \"bx--btn bx--btn--secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Toggle Video\"), React.createElement(\"div\", {\n      id: \"updatenote\",\n      class: \"updatenote mt10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \" loading model ..\"), React.createElement(\"video\", {\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.textInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Focus the text input\",\n      onClick: this.focusTextInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n\n    function toggleVideo() {\n      if (!isVideo) {\n        updateNote.innerText = \"Starting video\";\n        startVideo();\n      } else {\n        updateNote.innerText = \"Stopping video\";\n        handTrack.stopVideo(video);\n        isVideo = false;\n        updateNote.innerText = \"Video stopped\";\n      }\n    }\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","textInput","createRef","focusTextInput","bind","current","focus","componentDidMount","video","refs","canvas","context","getContext","trackButton","trackbutton","updateNote","updatenote","isVideo","model","modelParams","flipHorizontal","maxNumBoxes","iouThreshold","scoreThreshold","startVideo","then","status","console","log","innerText","runDetection","detect","predictions","renderPredictions","requestAnimationFrame","load","lmodel","disabled","render","toggleVideo","stopVideo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport handTrack from './Handshake';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  componentDidMount() {\n    const video = this.refs.video;\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n    let trackButton = this.refs.trackbutton;\n    let updateNote = this.refs.updatenote;\n\n    let isVideo = false;\n    let model = null;\n\n    const modelParams = {\n      flipHorizontal: true,   // flip e.g for video  \n      maxNumBoxes: 20,        // maximum number of boxes to detect\n      iouThreshold: 0.5,      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6,    // confidence threshold for predictions.\n    }\n\n    function startVideo() {\n      handTrack.startVideo(video).then(function (status) {\n          console.log(\"video started\", status);\n          if (status) {\n              updateNote.innerText = \"Video started. Now tracking\"\n              isVideo = true\n              runDetection()\n          } else {\n              updateNote.innerText = \"Please enable video\"\n          }\n      });\n  }\n    \n  \n  function runDetection() {\n      model.detect(video).then(predictions => {\n          console.log(\"Predictions: \", predictions);\n          model.renderPredictions(predictions, canvas, context, video);\n          if (isVideo) {\n              requestAnimationFrame(runDetection);\n          }\n      });\n  }\n  \n  // Load the model.\n  handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      model = lmodel\n      updateNote.innerText = \"Loaded Model!\"\n      trackButton.disabled = false\n  });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n            <button onClick={toggleVideo()} id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n            Toggle Video\n          </button>\n        <div id=\"updatenote\" class=\"updatenote mt10\"> loading model ..</div>\n        <video class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref=\"canvas\" width={640} height={425} />\n        <input\n          type=\"text\"\n          ref={this.textInput} />\n\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n\n    function toggleVideo() {\n      if (!isVideo) {\n          updateNote.innerText = \"Starting video\"\n          startVideo();\n      } else {\n          updateNote.innerText = \"Stopping video\"\n          handTrack.stopVideo(video)\n          isVideo = false;\n          updateNote.innerText = \"Video stopped\"\n      }\n  }\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}