{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideo: true,\n      isButtonDisabled: true,\n      buttonText: \"Loading Model...\"\n    };\n    this.toggleVideo = this.toggleVideo.bind(this); //this.startVideo = this.toggleVideo.bind(this);\n\n    this.video = React.createRef();\n    this.canvas = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef(); // this.isVideo = false;\n    // this.startVideo = this.startVideo.bind(this);\n    // this.runDetection = this.runDetection.bind(this);\n    // this.model = React.createRef();\n  }\n\n  startVideo() {\n    this.setState({\n      isVideo: true\n    });\n    handTrack.startVideo(this.video.current).then(function (status) {\n      console.log(\"video started\", status);\n\n      if (status) {//this.setState({buttonText: \"Video started. Now tracking\", isVideo: true});\n        //runDetection()\n      } else {//this.setState({buttonText: \"Please enable video\", isVideo: true});\n        }\n    });\n  }\n\n  toggleVideo() {\n    console.log(this.state.isVideo);\n\n    if (!this.state.isVideo) {\n      //this.setState({buttonText: \"Starting video\"});\n      this.startVideo();\n    } else {//this.setState({buttonText: \"Stopping video\"});\n      //handTrack.stopVideo(this.video.current);\n      //this.setState({isVideo: false, buttonText: \"Video stopped\"});\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.video.current);\n    console.log(this.canvas.current);\n    let context = this.canvas.current.getContext(\"2d\");\n    this.setState({\n      isVideo: false\n    });\n    let model = null;\n    const modelParams = {\n      flipHorizontal: true,\n      // flip e.g for video  \n      maxNumBoxes: 20,\n      // maximum number of boxes to detect\n      iouThreshold: 0.5,\n      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6 // confidence threshold for predictions.\n      // Load the model.\n\n    };\n    handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      model = lmodel;\n      this.setState({\n        isButtonDisabled: false,\n        buttonText: \"Loaded Model!\"\n      });\n    });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.toggleVideo(),\n      ref: this.trackButton,\n      disabled: this.state.isButtonDisabled,\n      id: \"trackbutton\",\n      class: \"bx--btn bx--btn--secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Toggle Video\"), React.createElement(\"div\", {\n      ref: this.updateNote,\n      id: \"updatenote\",\n      class: \"updatenote mt10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \" \", this.state.buttonText), React.createElement(\"video\", {\n      ref: this.video,\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: this.canvas,\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","state","isVideo","isButtonDisabled","buttonText","toggleVideo","bind","video","createRef","canvas","trackButton","updateNote","startVideo","setState","current","then","status","console","log","componentDidMount","context","getContext","model","modelParams","flipHorizontal","maxNumBoxes","iouThreshold","scoreThreshold","load","lmodel","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVideo : true,\n      isButtonDisabled: true,\n      buttonText: \"Loading Model...\"\n    };\n    this.toggleVideo = this.toggleVideo.bind(this);\n    //this.startVideo = this.toggleVideo.bind(this);\n    this.video = React.createRef();\n    this.canvas = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef();\n    // this.isVideo = false;\n    // this.startVideo = this.startVideo.bind(this);\n    // this.runDetection = this.runDetection.bind(this);\n    // this.model = React.createRef();\n  }\n\n  startVideo() {\n    this.setState({isVideo: true});\n    handTrack.startVideo(this.video.current).then(function (status) {\n        console.log(\"video started\", status);\n        if (status) {\n          //this.setState({buttonText: \"Video started. Now tracking\", isVideo: true});\n          //runDetection()\n        } else {\n          //this.setState({buttonText: \"Please enable video\", isVideo: true});\n        }\n    });\n}\n\n  toggleVideo() {\n    console.log(this.state.isVideo);\n    if (!this.state.isVideo) {\n      //this.setState({buttonText: \"Starting video\"});\n      this.startVideo();\n    } else {\n      //this.setState({buttonText: \"Stopping video\"});\n      //handTrack.stopVideo(this.video.current);\n      //this.setState({isVideo: false, buttonText: \"Video stopped\"});\n    }\n}\n  componentDidMount() {\n    console.log(this.video.current);\n    console.log(this.canvas.current); \n    let context = this.canvas.current.getContext(\"2d\");\n\n    this.setState({isVideo: false});\n    let model = null;\n\n    const modelParams = {\n      flipHorizontal: true,   // flip e.g for video  \n      maxNumBoxes: 20,        // maximum number of boxes to detect\n      iouThreshold: 0.5,      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6,    // confidence threshold for predictions.\n    }\n    // Load the model.\n    handTrack.load(modelParams).then(lmodel => {\n        // detect objects in the image.\n        model = lmodel\n        this.setState({isButtonDisabled: false, buttonText: \"Loaded Model!\"});\n    });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n          <button onClick={this.toggleVideo()} ref={this.trackButton} disabled={this.state.isButtonDisabled} \n          id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n              Toggle Video\n          </button>\n        <div ref={this.updateNote} id=\"updatenote\" class=\"updatenote mt10\"> {this.state.buttonText}</div>\n        <video ref={this.video} class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref={this.canvas} width={640} height={425} />\n      </div>\n    );\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}