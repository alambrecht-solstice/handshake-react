{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport handTrack from './Handshake';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = React.createRef();\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createRef();\n    this.runDetection = this.runDetection.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  toggleVideo() {\n    if (!this.isVideo) {\n      this.updateNote.innerText = \"Starting video\";\n      this.startVideo();\n    } else {\n      this.updateNote.innerText = \"Stopping video\";\n      handTrack.stopVideo(this.video);\n      this.isVideo = false;\n      this.updateNote.innerText = \"Video stopped\";\n    }\n  }\n\n  startVideo() {\n    handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n\n      if (status) {\n        this.updateNote.innerText = \"Video started. Now tracking\";\n        this.isVideo = true;\n        runDetection();\n      } else {\n        this.updateNote.innerText = \"Please enable video\";\n      }\n    });\n  }\n\n  runDetection() {\n    model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      model.renderPredictions(predictions, canvas, context, this.video);\n\n      if (this.isVideo) {\n        requestAnimationFrame(this.runDetection);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.video = this.refs.video;\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n    let trackButton = this.refs.trackbutton;\n    let updateNote = this.refs.updatenote;\n    this.isVideo = false;\n    let model = null;\n    const modelParams = {\n      flipHorizontal: true,\n      // flip e.g for video  \n      maxNumBoxes: 20,\n      // maximum number of boxes to detect\n      iouThreshold: 0.5,\n      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6 // confidence threshold for predictions.\n      // Load the model.\n\n    };\n    handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      model = lmodel;\n      updateNote.innerText = \"Loaded Model!\";\n      trackButton.disabled = false;\n    });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.toggleVideo(),\n      id: \"trackbutton\",\n      class: \"bx--btn bx--btn--secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Toggle Video\"), React.createElement(\"div\", {\n      id: \"updatenote\",\n      class: \"updatenote mt10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" loading model ..\"), React.createElement(\"video\", {\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      ref: this.textInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Focus the text input\",\n      onClick: this.focusTextInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","textInput","createRef","focusTextInput","bind","toggleVideo","isVideo","updateNote","startVideo","video","runDetection","current","focus","innerText","stopVideo","then","status","console","log","model","detect","predictions","renderPredictions","canvas","context","requestAnimationFrame","componentDidMount","refs","getContext","trackButton","trackbutton","updatenote","modelParams","flipHorizontal","maxNumBoxes","iouThreshold","scoreThreshold","load","lmodel","disabled","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport handTrack from './Handshake';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = React.createRef();\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createRef();\n    this.runDetection = this.runDetection.bind(this);\n\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  toggleVideo() {\n    if (!this.isVideo) {\n        this.updateNote.innerText = \"Starting video\"\n        this.startVideo();\n    } else {\n        this.updateNote.innerText = \"Stopping video\"\n        handTrack.stopVideo(this.video)\n        this.isVideo = false;\n        this.updateNote.innerText = \"Video stopped\"\n    }\n}\n\nstartVideo() {\n  handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n      if (status) {\n          this.updateNote.innerText = \"Video started. Now tracking\"\n          this.isVideo = true\n          runDetection()\n      } else {\n          this.updateNote.innerText = \"Please enable video\"\n      }\n  });\n}\n\nrunDetection() {\n  model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      model.renderPredictions(predictions, canvas, context, this.video);\n      if (this.isVideo) {\n          requestAnimationFrame(this.runDetection);\n      }\n  });\n}\n  componentDidMount() {\n    this.video = this.refs.video;\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n    let trackButton = this.refs.trackbutton;\n    let updateNote = this.refs.updatenote;\n\n    this.isVideo = false;\n    let model = null;\n\n    const modelParams = {\n      flipHorizontal: true,   // flip e.g for video  \n      maxNumBoxes: 20,        // maximum number of boxes to detect\n      iouThreshold: 0.5,      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6,    // confidence threshold for predictions.\n    }\n  \n\n  \n  // Load the model.\n  handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      model = lmodel\n      updateNote.innerText = \"Loaded Model!\"\n      trackButton.disabled = false\n  });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n            <button onClick={this.toggleVideo()} id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n            Toggle Video\n          </button>\n        <div id=\"updatenote\" class=\"updatenote mt10\"> loading model ..</div>\n        <video class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref=\"canvas\" width={640} height={425} />\n        <input\n          type=\"text\"\n          ref={this.textInput} />\n\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}