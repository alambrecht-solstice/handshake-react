{"ast":null,"code":"var _jsxFileName = \"/Users/alexlambrecht/koko/handshake-test/src/Handshake.js\";\nimport React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props); // create a ref to store the textInput DOM element\n    // this.textInput = React.createRef();\n    // this.focusTextInput = this.focusTextInput.bind(this);\n\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = false;\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createRef();\n    this.runDetection = this.runDetection.bind(this);\n    this.model = React.createRef();\n    this.canvas = React.createRef();\n    this.context = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef();\n  } // focusTextInput() {\n  //   // Explicitly focus the text input using the raw DOM API\n  //   // Note: we're accessing \"current\" to get the DOM node\n  //   this.textInput.current.focus();\n  // }\n\n\n  toggleVideo() {\n    console.log(this.isVideo);\n\n    if (!this.isVideo) {\n      //this.updateNote.innerText = \"Starting video\"\n      this.startVideo();\n    } else {\n      //this.updateNote.innerText = \"Stopping video\"\n      handTrack.stopVideo(this.video);\n      this.isVideo = false; //this.updateNote.innerText = \"Video stopped\"\n    }\n  }\n\n  startVideo() {\n    console.log(this.video);\n    handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n\n      if (status) {\n        //this.updateNote.innerText = \"Video started. Now tracking\"\n        this.isVideo = true;\n        this.runDetection();\n      } else {//this.updateNote.innerText = \"Please enable video\"\n      }\n    });\n  }\n\n  runDetection() {\n    this.model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      this.model.renderPredictions(predictions, this.canvas, this.context, this.video);\n\n      if (this.isVideo) {\n        requestAnimationFrame(this.runDetection);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.video.value = this.refs.video;\n    console.log(React.findDOMNode(this.refs.video).value);\n    this.canvas = this.refs.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.trackButton = this.refs.trackbutton;\n    this.updateNote = this.refs.updatenote;\n    this.isVideo.value = false;\n    this.model = null;\n    const modelParams = {\n      flipHorizontal: true,\n      // flip e.g for video  \n      maxNumBoxes: 20,\n      // maximum number of boxes to detect\n      iouThreshold: 0.5,\n      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6 // confidence threshold for predictions.\n      // Load the model.\n\n    };\n    handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      this.model = lmodel; //updateNote.innerText = \"Loaded Model!\"\n      //this.trackButton.disabled = false\n    });\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.toggleVideo(),\n      id: \"trackbutton\",\n      class: \"bx--btn bx--btn--secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Toggle Video\"), React.createElement(\"div\", {\n      id: \"updatenote\",\n      class: \"updatenote mt10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" loading model ..\"), React.createElement(\"video\", {\n      ref: this.video,\n      class: \"videobox canvasbox\",\n      autoplay: \"autoplay\",\n      id: \"myvideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: 640,\n      height: 425,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default HandshakeClass;","map":{"version":3,"sources":["/Users/alexlambrecht/koko/handshake-test/src/Handshake.js"],"names":["React","handTrack","HandshakeClass","Component","constructor","props","toggleVideo","bind","isVideo","updateNote","createRef","startVideo","video","runDetection","model","canvas","context","trackButton","console","log","stopVideo","then","status","detect","predictions","renderPredictions","requestAnimationFrame","componentDidMount","value","refs","findDOMNode","getContext","trackbutton","updatenote","modelParams","flipHorizontal","maxNumBoxes","iouThreshold","scoreThreshold","load","lmodel","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as handTrack from '../node_modules/handtrackjs';\n\nclass HandshakeClass extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    // this.textInput = React.createRef();\n    // this.focusTextInput = this.focusTextInput.bind(this);\n    this.toggleVideo = this.toggleVideo.bind(this);\n    this.isVideo = false;\n    this.updateNote = React.createRef();\n    this.startVideo = this.startVideo.bind(this);\n    this.video = React.createRef();\n    this.runDetection = this.runDetection.bind(this);\n    this.model = React.createRef();\n    this.canvas = React.createRef();\n    this.context = React.createRef();\n    this.trackButton = React.createRef();\n    this.updateNote = React.createRef();\n\n\n\n  }\n\n  // focusTextInput() {\n  //   // Explicitly focus the text input using the raw DOM API\n  //   // Note: we're accessing \"current\" to get the DOM node\n  //   this.textInput.current.focus();\n  // }\n\n  toggleVideo() {\n    console.log(this.isVideo);\n    if (!this.isVideo) {\n        //this.updateNote.innerText = \"Starting video\"\n        this.startVideo();\n    } else {\n        //this.updateNote.innerText = \"Stopping video\"\n        handTrack.stopVideo(this.video)\n        this.isVideo = false;\n        //this.updateNote.innerText = \"Video stopped\"\n    }\n}\n\nstartVideo() {\n  console.log(this.video);\n  handTrack.startVideo(this.video).then(function (status) {\n      console.log(\"video started\", status);\n      if (status) {\n          //this.updateNote.innerText = \"Video started. Now tracking\"\n          this.isVideo = true\n          this.runDetection()\n      } else {\n          //this.updateNote.innerText = \"Please enable video\"\n      }\n  });\n}\n\nrunDetection() {\n  this.model.detect(this.video).then(predictions => {\n      console.log(\"Predictions: \", predictions);\n      this.model.renderPredictions(predictions, this.canvas, this.context, this.video);\n      if (this.isVideo) {\n          requestAnimationFrame(this.runDetection);\n      }\n  });\n}\n  componentDidMount() {\n    this.video.value = this.refs.video;\n    console.log(React.findDOMNode(this.refs.video).value);\n    this.canvas = this.refs.canvas;\n    this.context = this.canvas.getContext(\"2d\");\n    this.trackButton = this.refs.trackbutton;\n    this.updateNote = this.refs.updatenote;\n\n    this.isVideo.value = false;\n    this.model = null;\n\n    const modelParams = {\n      flipHorizontal: true,   // flip e.g for video  \n      maxNumBoxes: 20,        // maximum number of boxes to detect\n      iouThreshold: 0.5,      // ioU threshold for non-max suppression\n      scoreThreshold: 0.6,    // confidence threshold for predictions.\n    }\n  \n\n  \n  // Load the model.\n  handTrack.load(modelParams).then(lmodel => {\n      // detect objects in the image.\n      this.model = lmodel\n      //updateNote.innerText = \"Loaded Model!\"\n      //this.trackButton.disabled = false\n  });\n\n  }\n\n\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n            <button onClick={this.toggleVideo()} id=\"trackbutton\" class=\"bx--btn bx--btn--secondary\" type=\"button\">\n            Toggle Video\n          </button>\n        <div id=\"updatenote\" class=\"updatenote mt10\"> loading model ..</div>\n        <video ref={this.video} class=\"videobox canvasbox\" autoplay=\"autoplay\" id=\"myvideo\"></video>\n        <canvas ref=\"canvas\" width={640} height={425} />\n        {/* <input\n          type=\"text\"\n          ref={this.textInput} />\n\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default HandshakeClass;"]},"metadata":{},"sourceType":"module"}